# QIDI Plus4 MAINLINE KLIPPER V12

[gcode_macro WIPE_NOZZLE]
gcode:
    {% set hotendtemp = params.HOTEND|default(250)|int %}
    {% if (printer.gcode_move.position.z ) < 35 %}
        G1 Z35 F900
    {% else %}
        G91
        G1 Z{5} F900 
        G90
    {% endif %}
    G1 X56 F12000
    G1 Y310 F12000
    G1 Y324 F600
    G1 X95 F600
    M400
    M109 S{hotendtemp}
    G92 E0
    G1 E5 F50
    G92 E0
    G1 E80 F200
    G92 E0
    G1 E-2 F200

    M106 S255
    G4 P5000
    M104 S140
    G1 Y318 F9000
    G1 Y322 F600
    G1 Y318 F9000
    G1 Y322 F600
    G1 Y308 F30000
    G1 Y324 F600

    G1 X124 E-1 F1000 

    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={170}

    G1 X133 F200
    G1 Y321 F200
    G2 I0.5 J0.5 F600
    G2 I0.5 J0.5 F600
    G2 I0.5 J0.5 F600

    G1 Y319 F150
    G1 X132 
    G1 Y324
    G1 X131 
    G1 Y319
    G1 X130
    G1 Y324
    G1 X129
    G1 Y319

    G1 X113 F200
    G1 Y320
    G1 X125
    G1 X113
    G1 X125
    G2 I0.5 J0.5 F200
    G2 I0.5 J0.5 F200
    G2 I0.5 J0.5 F200    

    G1 Y300 F600
    G1 X95 F12000
    G1 Y314 F9000
    G1 Y324 F600

    G1 X58 F12000
    G1 X78 F12000
    G1 Y324
    G1 X58 F12000
    G1 X78 F12000
    G1 Y323.5
    G1 X58 F12000
    G1 X78 F12000
    G1 Y323
    G1 X58 F12000
    G1 X78 F12000
    G1 Y322.5
    G1 X58 F12000
    G1 X78 F12000
    G1 Y322
    G1 X58 F12000
    G1 X75 F12000
    G1 Y321.5
    G2 I0.8 J0.8 F600
    G2 I0.8 J0.8 F600
    G2 I0.8 J0.8 F600

    G1 Y324 F600

    M106 S0

    G1 X95 F12000
    G1 Y316 F9000
    G1 Y312 F600

    M400
    M118 Nozzle cleared
    G1 Y10 F12000
    G1 X10 F12000
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={150}
    M107
    M106 P2 S0
    M400
    M118 Nozzle cooled

[gcode_macro _Sensorless_Homing_Variables]
description: Variables for sensorless homing X and Y

variable_homing_current_x: 0.9                # The desired motor current for homing the X and Y axes. Leave as '0.0' to use run_current values instead.
variable_homing_current_y: 0.9                # The desired motor current for homing the X and Y axes. Leave as '0.0' to use run_current values instead.
variable_clear_time: 3                      # Time in seconds to wait for stallguard registers to clear, default is 1 second.
variable_x_backoff_distance: 30             # Distance in mm to back off from the X axis after homing.
variable_y_backoff_distance: 30             # Distance in mm to back off from the Y axis after homing.
variable_z_backoff_distance: 10
variable_z_hop_distance: 6                  # Distance to move Z axis prior to homing, and after homing.
variable_first_homed_axis: 'Y'              # First axis to home when 'G28' is called. Some prefer homing Y before X. #Added option for Z first
variable_z_after_home: 20                   # Position to set Z after homing.
variable_z_after_bed: 10                    # Position to set Z after probing bed with nozzle 
variable_probe_after_z: False                 #Probe bed with mesh sensor after homing Z. True or false
variable_z_after_tilt: 20
## The following variables are used for moving the printhead to a certain part of the bed before homing the Z axis:

variable_safe_z_enable: True               # Enables/disables moving the printhead before homing the Z axis.
variable_safe_x: 150                    # Safe X position to home the Z axis, leave at -128 to home to the center of the X axis.
variable_safe_y: 150                   # Safe Y position to home the Z axis, leave at -128 to home to the center of the Y axis.

# Do not modify below
gcode:

[gcode_macro _HOME_X]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            # Pull variables from _Sensorless_Homing_Variables
    {% set homing_current_x = sensorless_variables.homing_current_x | float %}                          #
    {% set homing_current_y = sensorless_variables.homing_current_y | float %}                          #
    {% set backoff_distance = sensorless_variables.x_backoff_distance | float %}                    #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         #

    {% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}        # Pull X axis homing speed from config
    {% set homing_speed = (printer.configfile.settings['stepper_x'].homing_speed * 60) | float %}   #

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'y' not in printer.toolhead.homed_axes %}                                               # Check if the Y axis is not homed, if Y is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current_x}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current_y}                                  #
      {% elif 'x' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current_x}                                  # If X is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current_y}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    G28 X                                                                                           # Home the X axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 X-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 X{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}
    {% endif %}
    
    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    G28 X                                                                                           # Home the X axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 X-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 X{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}
    {% endif %} 

    {% if positive_dir == True %}                                                                   # Check if homing direction is positive
      G0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}               # Set X axis position to remove offset incurred from sensorless homing
    {% else %}                                                                                      #
      G0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}               # Set X axis position to remove offset incurred from sensorless homing
    {% endif %}                                                                                     #

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current was configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_x' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_x = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_y' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_y = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'y' in printer.toolhead.homed_axes %}                                                       # If the Y axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

[gcode_macro _HOME_Y]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            # Pull variables from _Sensorless_Homing_Variables
    {% set homing_current_y = sensorless_variables.homing_current_y | float %}                          #
    {% set homing_current_x = sensorless_variables.homing_current_x | float %}                          #
    {% set backoff_distance = sensorless_variables.y_backoff_distance | float %}                    #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         #

    {% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}        # Pull Y axis homing speed from config
    {% set homing_speed = (printer.configfile.settings['stepper_y'].homing_speed * 60) | float %}   #

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'x' not in printer.toolhead.homed_axes %}                                               # Check if the X axis is not homed, if X is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current_x}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current_y}                                  #
      {% elif 'y' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current_x}                                  # If Y is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current_y}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    G28 Y                                                                                           # Home the Y axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 Y-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 Y{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}
    {% endif %}                                                                                     #

    {% if positive_dir == True %}                                                                   # Check if homing direction is positive
      G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    {% else %}                                                                                      #
      G0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    {% endif %}
    
    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    G28 Y                                                                                           # Home the Y axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 Y-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 Y{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}
    {% endif %}                                                                                     #

    {% if positive_dir == True %}                                                                   # Check if homing direction is positive
      G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    {% else %}                                                                                      #
      G0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    {% endif %}

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current is configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_x' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_x = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_y' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_y = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'x' in printer.toolhead.homed_axes %}                                                       # If the X axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear


[homing_override]
axes: xyz
#set_position_z: 0
gcode:

    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}              #
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}    #
    {% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}                           #
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            #
    {% set z_hop_distance = sensorless_variables.z_hop_distance | float %}                          # Collect all variables needed for sensorless homing
    {% set first_homed_axis = sensorless_variables.first_homed_axis | string %}                     # from machine config file and _Sensorless_Homing_Variables
    {% set safe_x = sensorless_variables.safe_x | float %}                                          #
    {% set safe_y = sensorless_variables.safe_y | float %}                                          #
    {% set safe_z = sensorless_variables.safe_z_enable | abs %}                                     #
    {% set z_after_home = sensorless_variables.z_after_home | float %}
    {% set z_after_bed = sensorless_variables.z_after_bed | float %}
    {% set probe_after_z = sensorless_variables.probe_after_z | abs %}
    {% set z_after_tilt = sensorless_variables.z_after_tilt | abs %}

    {% if printer.configfile.settings.beacon is defined %}                                          # Check if a third-party [probe] definiton is used
        {% set probe_name = printer.configfile.settings.beacon %}                                   # If [beacon] is found in config, set 'probe_name' as [beacon] config string
    {% elif printer.configfile.settings.probe is defined %}                                         #
        {% set probe_name = printer.configfile.settings.probe %}                                    # If [probe] is found in config, set 'probe_name' as [probe] config string
    {% elif printer.configfile.settings.dockable_probe is defined %}                                #
        {% set probe_name = printer.configfile.settings.dockable_probe %}                           # If [dockable_probe] is found in config, set 'probe_name' as [dockable_probe] config string
    {% elif printer.configfile.settings.bltouch is defined %}                                       #
        {% set probe_name = printer.configfile.settings.bltouch %}                                  # If [bltouch] is found in config, set 'probe_name' as [bltouch] config string
    {% endif %}                                                                                     #

    {% if 'probe' in printer.configfile.settings.stepper_z.endstop_pin %}                           # Check if Z is configured to home with a probe and pull config values for
        {% set probe_x_offset = probe_name.x_offset | float %}                                      # X and Y offsets
        {% set probe_y_offset = probe_name.y_offset | float %}                                      #
    {% else %}                                                                                      #
        {% set probe_x_offset = 0 | float %}                                                        #
        {% set probe_y_offset = 0 | float %}                                                        # If Z if not homed with a probe, set offsets to 0 (do not apply an offset)
    {% endif %}                                                                                     #

    {% if safe_x == -128 %}                                                                         #
        {% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}                  # If safe_x is '-128', set safe_x to the center of the X axis
    {% endif %}                                                                                     #

    {% if probe_x_offset < 0 %}                                                                     #
        {% set safe_x = safe_x + probe_x_offset %}                                                  #
    {% elif probe_x_offset > 0 %}                                                                   # Depending on if probe_x_offset is a positive or negative value, adjust safe_x
        {% set safe_x = safe_x - probe_x_offset %}                                                  # If the machine does not home Z with a probe, an offset is not applied.
    {% endif %}                                                                                     #

    {% if safe_y == -128 %}                                                                         # 
        {% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}                  # If safe_y is '-128', set safe_y to the center of the Y axis
    {% endif %}                                                                                     #

    {% if probe_y_offset < 0 %}                                                                     #
        {% set safe_y = safe_y + probe_y_offset %}                                                  #
    {% elif probe_y_offset > 0 %}                                                                   # Depending on if probe_y_offset is a positive or negative value, adjust safe_y
        {% set safe_y = safe_y - probe_y_offset %}                                                  # If the machine does not home Z with a probe, an offset is not applied.
    {% endif %}                                                                                     #

    {% if z_hop_distance > 0 %}                                                                     # Check if z_hop_distance is greater than zero
      {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}    # If X and Y are not homed, move Z to z_hop_distance
        #G0 Z{z_hop_distance} F{z_hop_speed}                                                         #
        #M84 Z
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'X' %}                                                                # If first_homed_axis is 'X', begin G28 param check
      {% if home_all or 'X' in params %}                                                            #
        _HOME_X                                                                                     # If home_all or 'X' is in params, home X
      {% endif %}                                                                                   #
      {% if home_all or 'Y' in params %}                                                            # If home_all or 'Y' in params, home Y
        _HOME_Y                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'Y' %}                                                                # If first_homed_axis is 'Y', begin G28 param check
      {% if home_all or 'Y' in params %}                                                            #
        _HOME_Y                                                                                     # if home_all or 'Y' is in params, home Y
      {% endif %}                                                                                   #
      {% if home_all or 'X' in params %}                                                            # If home_all or 'X' in params, home X
        _HOME_X                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}
 

   
    {% if home_all or 'Z' in params %}                                                              #
        {% if safe_z == True and (home_all or 'Z' in params) %}                                         # If safe_z is true and home_all or 'Z' is in params,
        #G0 Z{z_hop_distance} F{z_hop_speed}
        G0 X{safe_x} Y{safe_y} F{travel_speed}                                                      # Move to the defined safe XY location
        {% endif %}
        G28 Z
        G0 Z{z_hop_distance} F{z_hop_speed}
    {% endif %}

    #{% if probe_after_z == True %}
    #    G0 Z{z_after_bed} F{z_hop_speed}                                                           # Move Z to Z after bed position
    #{% endif %}


    #{% if probe_after_z == True and (home_all or 'Z' in params) %}                                  # If safe_z is true and home_all or 'Z' is in params,
     #   Probe                                                                                       # Probe bed
     #   G0 Z{z_after_home} F{z_hop_speed}                                                           # Move Z to Z after home position
    #{% endif %}


    
    #{% if probe_after_z == False %}
    #    G0 Z{z_after_home} F{z_hop_speed}                                                           # Move Z to Z after home position
    #{% endif %}

# Excute when start printing, prior to gcode file
[gcode_macro PRINT_START]
gcode:
    AUTOTUNE_SHAPERS

    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    M104 S0

    M106 P2 S0
    M106 P3 S0
    M106 S255
    G28      
    M141 S0
    M140 S{bedtemp}    
    M106 S0
    M190 S{bedtemp}     
#    M141 S{chambertemp}    
    M104 S140
    Z_TILT_ADJUST
    G28 Z
    BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1
    BED_MESH_PROFILE SAVE=adaptive
    BED_MESH_PROFILE LOAD=adaptive
    G0 Z50 F600
    G0 X5 Y5  F6000
    
    {% if chambertemp == 0 %}
        M106 P3 S255
    {% endif %}
    M109 S{hotendtemp}
    M141 S{chambertemp}    
    M204 S10000
    SET_PRINT_STATS_INFO CURRENT_LAYER=1
    ENABLE_ALL_SENSOR
    save_last_file

[gcode_macro ENABLE_ALL_SENSOR]
gcode:
    ENABLE_FILAMENT_WIDTH_SENSOR
    RESET_FILAMENT_WIDTH_SENSOR
    query_filament_width
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1

[gcode_macro DISABLE_ALL_SENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0
    DISABLE_FILAMENT_WIDTH_SENSOR


[gcode_macro AUTOTUNE_SHAPERS]
variable_autotune_shapers: 'ei'
gcode:

[gcode_macro M84]
rename_existing:M84.1
gcode:
    M84.1
	SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0


# Excute when klipper init
[delayed_gcode PRINTER_INIT]
initial_duration:0.2
gcode:
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
    BED_MESH_CLEAR      
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0


    

[gcode_macro SHAPER_CALIBRATE]
rename_existing: RESHAPER_CALIBRATE
gcode:
    RESHAPER_CALIBRATE FREQ_START=20 FREQ_END=150

# Excute when print end, after gcode file
[gcode_macro PRINT_END]
gcode:
    {% if printer.gcode_move.homing_origin.z < 0.5 %}
       SAVE_VARIABLE VARIABLE=z_offset VALUE={printer.gcode_move.homing_origin.z}
    {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    CLEAR_PAUSE
    M400
    G4 P5000
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100
    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	
    DISABLE_ALL_SENSOR
    BED_MESH_CLEAR
    G31
    CLEAR_LAST_FILE
    M84
    BEEP I=2 DUR=500

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% if (printer.gcode_move.position.z) < 200 %}
        G1 Z200 F600                                      
    {% endif %}
    {% if (printer.gcode_move.position.y) > 300 %}
        G1 Y250 F6000
    {% endif %}
    G1  X0 Y0 F7800
    save_zoffset
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    CLEAR_PAUSE

    M106 P2 S0
    M106 P0 S0
    M106 P3 S0
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100
    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	
    DISABLE_ALL_SENSOR
    BED_MESH_CLEAR
    G31
    BEEP I=2 DUR=500

    M84
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    CLEAR_LAST_FILE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z = params.Z|default(35)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=efan VALUE={printer["fan_generic cooling_fan"].speed *255}

        DISABLE_FILAMENT_WIDTH_SENSOR
        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0    
        SAVE_GCODE_STATE NAME=PAUSE              
        BASE_PAUSE
        G92 E0
        G1 E-5 F1800
        {% if (printer.gcode_move.position.z ) < z %}
            G91
            G1 Z{z} F900
        {% else %}
            G91
            G1 Z{5} F900 
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        G90
        G1 X95 F12000
        G1 Y312 F12000
        G1 Y316 F600
        G1 Y320 F9000
        G1 Y324 F600
        SAVE_GCODE_STATE NAME=PAUSEPARK
        M104 S0
        SET_IDLE_TIMEOUT TIMEOUT=86400
        SET_STEPPER_ENABLE STEPPER=extruder enable=0
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
variable_efan: 0
gcode:
    {% set e = params.E|default(5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            M109 S{etemp|int}
        {% endif %}
        M83              
        M106 S0
        G1 X95 F12000
        G1 Y324 F12000                
        G92 E0
        G1 E5 F50
        G92 E0
        G1 E50 F200
        G92 E0
        G1 E-0.8 F200
        G4 P300

        M106 S{efan}

        G1 Y318 F30000
        G1 Y322 F3000
        G1 Y318 F30000
        G1 Y322 F3000
        G1 Y318 F30000
        G1 Y322 F3000
        G1 Y324 F600

        G1 X58 F12000
        G1 X78 F12000
        G1 X58 F12000
        G1 X78 F12000
        G1 X58 F12000
        G1 X78 F12000
        G1 X58 F12000
        G1 X78 F12000
        G1 X58 F12000
        G1 X78 F12000
        G1 X58 F12000
        G1 X78 F12000
        G1 X95 F12000

        G1 Y316 F9000
        G1 Y312 F600
        G1 Y260 F12000 
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=200                            
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=15
        BASE_RESUME       
        ENABLE_FILAMENT_WIDTH_SENSOR
        RESET_FILAMENT_WIDTH_SENSOR
        query_filament_width
        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1
    {% endif %}

[gcode_macro BEEP]
gcode:
    {% set i = params.I|default(1)|int %}
    {% set dur = params.DUR|default(100)|int %}

    {% if printer["output_pin sound"].value|int == 1 %}
        {% for iteration in range(i|int) %}
            SET_PIN PIN=beeper VALUE=1
            G4 P{dur}
            SET_PIN PIN=beeper VALUE=0
    		G4 P{dur}
        {% endfor %}
    {% endif %}



[gcode_macro M141]
gcode:
    {% if printer["heater_generic chamber"] is defined %}
        {% set s = params.S|float %}
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={([s, 65]|min)}
        # {% if printer['heater_bed'].target < s+25 and s!=0 %}
        #     M140 S{s+25}
        #     M118 If the heatbed is below {s+25} degrees, the heatbed temperature will be automatically set to {s+25}.
        # {% endif %}
    {% endif %}


[gcode_macro M191]
gcode:
    {% if printer["heater_generic chamber"] is defined %}
        {% set s = params.S|float %}
    
        M141 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
        {% if s != 0 %}
            TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={([s, 65]|min)-2}
        {% endif %}
    {% endif %}

[gcode_macro M106]
gcode:
    {% set p = params.P|default(0)|int %}

    {% if p == 2 %}
    {% if params.S is defined %}
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED={(params.S|float / 255.0)}
    {% else %}
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED=1
    {% endif %}
    {% endif %} 

    {% if p == 0 %}
    {% if params.S is defined %}
        SET_FAN_SPEED FAN=cooling_fan SPEED={(params.S|float / 255.0)}
        
    {% else %}
        SET_FAN_SPEED FAN=cooling_fan SPEED=1
    {% endif %}
    {% endif %} 

    {% if p == 3 %}
    {% if params.S is defined %}
        SET_FAN_SPEED FAN=chamber_circulation_fan SPEED={(params.S|float / 255.0)}
    {% else %}
        SET_FAN_SPEED FAN=chamber_circulation_fan SPEED=1
    {% endif %}
    {% endif %} 

[gcode_macro M107]
gcode:  
    SET_FAN_SPEED FAN=cooling_fan SPEED=0

[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %} 
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}

[gcode_macro M8029]
gcode:
     {% if params.D is defined %}
       {% if (params.D|int)==1 %} 
        ENABLE_FILAMENT_WIDTH_SENSOR
       {% endif %}
       {% if (params.D|int)==0 %} 
        DISABLE_FILAMENT_WIDTH_SENSOR
       {% endif %}
     {% endif %}

[gcode_macro M900]
gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 

[gcode_macro M290]
gcode:
   SET_GCODE_OFFSET Z_ADJUST={params.Z}

[gcode_macro M901]
gcode:
    G28
    SHAPER_CALIBRATE
    M118 Input shaping complete
    SAVE_CONFIG
       
[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro M25]
rename_existing: M9925
gcode:
    PAUSE

[gcode_macro RESPOND_INFO]
variable_S:0
gcode:
    {% if params.S is defined %}
        {% set s = params.S|int %}
        {% if s == 0 %}
            { action_respond_info("Nozzle cooled")  }
        {% endif %}
    {% endif %}




[gcode_macro M603]
description: Unload filament
gcode:
    {% set hotendtemp = params.S|default(250)|int %}
    {% set accel = printer.toolhead.max_accel|int %}
    G28
    M204 S10000
    G1 Y150 F9000
    G1 X305 F9000
    G1 Y20 F9000
    G1 Y5 F3000
    G4 P500
    G1 Y20 F9000
    G1 Y5 F3000
    G4 P500
    G1 Y20 F9000
    
    G1 X56  F12000
    G1 Y310 F12000
    G1 Y324 F600
    G1 X95  F600

    M106 S0
    M109 S{hotendtemp}
    M118 Heat up complete

    G92 E0
    G1 E5 F50
    G1 E50 F200
    G92 E0
    G1 E-0.8 F200
    G4 P300

    M106 S255
    M104 S{hotendtemp-100}   
    G4 P5000


    G1 Y318 F9000
    G1 Y322 F600
    G1 Y318 F9000
    G1 Y322 F600
    G1 Y308 F30000
    G1 Y324 F600

    M106 S0
    M400
    M204 S{accel}
    M118 Unload finish

[gcode_macro M604]
description: Load filament
gcode:
    {% set hotendtemp = params.S|default(250)|int %}
    {% set current_state = params.F|default(1)|int %}
    {% set accel = printer.toolhead.max_accel|int %}
    M204 S10000
    M104 S{hotendtemp}
    G28
    {% if current_state == 1 %}
        {% if (printer.gcode_move.position.y) > 300 %}
            G91
            G1 Y-20 F9000
            G90
        {% endif %}
        G1 X95 F12000
        G1 Y312 F12000
        G1 Y316 F600
        G1 Y320 F9000
        G1 Y324 F600
    {% endif %}
    M109 S{hotendtemp}
    M118 Heat up complete

    G1 X95 F600
    G1 Y324 F600
    G92 E0
    G1 E5 F50
    G92 E0
    G1 E120 F300
    G92 E0
    G1 E-0.8 F200
    G4 P300

    M106 S255
    M104 S{hotendtemp-100}    
    G4 P5000

    G1 Y318 F9000
    G1 Y322 F600
    G1 Y318 F9000
    G1 Y322 F600
    G1 Y308 F30000
    G1 Y324 F600

    M106 S0

    M400
    M204 S{accel}
    M118 Load finish

[output_pin sound]
pin:PA1
value:0

[gcode_macro beep_on]
gcode:
    SET_PIN PIN=sound VALUE=1
    
[gcode_macro beep_off]
gcode:
    SET_PIN PIN=sound VALUE=0


[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
    {% endif %}



[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}


 
